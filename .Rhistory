pivot_wider(names_from = label, values_from = n, values_fill = 0) %>%
arrange(death_month)
summary_table <- summary_table %>%
left_join(summary_table_death, by = c("month_relative" = "death_month"))
summary_table <- summary_table %>%
mutate(across(where(is.numeric), ~replace_na(., 0)))
View(summary_table)
4662+4920
4662+4920+25
transition_counts_summary <- transition_counts %>%
mutate(month = floor_date(linestartdate, "month")) %>%
select(patientid, state, month) %>%
arrange(patientid, month) %>%
group_by(patientid) %>%
complete(month = seq.Date(min(month), max(month), by = "1 month")) %>%
fill(state, .direction = "down") %>%
mutate(death_flag = state == "Death") %>%
mutate(after_death = cumsum(death_flag) > 1) %>%
filter(!after_death) %>%
ungroup() %>%
select(-death_flag, -after_death)
View(transition_counts_summary)
transition_counts_summary <- transition_counts_summary %>%
filter(state != "Death") %>%
dplyr::group_by(patientid, month) %>%
dplyr::arrange(patientid, month) %>%  # or another time-based column
dplyr::slice_tail(n = 1) %>%
dplyr::ungroup()
transition_counts_summary <- transition_counts_summary %>%
left_join(flatiron_data, by = "patientid")
transition_counts_summary <- transition_counts_summary %>%
mutate(gender = na_if(trimws(gender), ""))
transition_counts_summary <- transition_counts_summary %>%
arrange(patientid, month) %>%
group_by(patientid) %>%
mutate(month_relative = row_number()) %>%
ungroup()
View(transition_counts_summary)
xx <- transition_counts_summary %>% filter(month_relative == 1)
library(dplyr)
library(tidyr)
# Step 1: Map labels
summary_counts <- transition_counts_summary %>%
mutate(
label = case_when(
state == "On_Treatment_Target_Line" & gender == "F" ~ "N_on_F",
state == "On_Treatment_Target_Line" & gender == "M" ~ "N_on_M",
state == "off_treatment" & gender == "F" ~ "N_off_F",
state == "off_treatment" & gender == "M" ~ "N_off_M",
state == "progression" & gender == "F" ~ "N_p_F",
state == "progression" & gender == "M" ~ "N_p_M",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(label))  # Remove rows we don't use
# Step 2: Count occurrences
summary_table <- summary_counts %>%
group_by(month_relative, label) %>%
summarise(n = n(), .groups = "drop") %>%
pivot_wider(names_from = label, values_from = n, values_fill = 0) %>%
arrange(month_relative)
View(summary_table)
4662+4920+95
4662+4920+95+25
View(xx)
# Step 1: Map labels
summary_counts <- transition_counts_summary %>%
mutate(
label = case_when(
state == "On_Treatment_Target_Line" & gender == "F" ~ "N_on_F",
state == "On_Treatment_Target_Line" & gender == "M" ~ "N_on_M",
state == "off_treatment" & gender == "F" ~ "N_off_F",
state == "off_treatment" & gender == "M" ~ "N_off_M",
state == "progression" & gender == "F" ~ "N_p_F",
state == "progression" & gender == "M" ~ "N_p_M",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(label))  # Remove rows we don't use
View(summary_counts)
xx <- summary_counts %>% filter(month_relative == 1)
View(xx)
summary_table <- summary_counts %>%
group_by(month_relative, label) %>%
summarise(n = n(), .groups = "drop")
View(summary_table)
summary_table <- summary_counts %>%
group_by(month_relative) %>%
summarise(n = n(), .groups = "drop")
View(summary_table)
# Step 2: Count occurrences
summary_table <- summary_counts %>%
group_by(month_relative, label) %>%
summarise(n = n(), .groups = "drop")
View(summary_table)
4662+4920+119+95+25+22
View(summary_table)
# Step 2: Count occurrences
summary_table <- summary_counts %>%
group_by(month_relative, label) %>%
summarise(n = n(), .groups = "drop") %>%
pivot_wider(names_from = label, values_from = n, values_fill = 0) %>%
arrange(month_relative)
# Death transitions
death_transitions <- transition_counts %>%
group_by(patientid) %>%
arrange(linestartdate) %>%
mutate(on_treatment = first(linestartdate)) %>%
ungroup() %>%
filter(next_state == "Death") %>%
group_by(patientid) %>%
mutate(death_month = round(time_length(
interval(on_treatment, lineenddate), "month"
)) + 1) %>%
select(patientid, state, death_month) %>%
left_join(flatiron_data, by = "patientid") %>%
ungroup()
summary_counts_death <- death_transitions %>%
mutate(
label = case_when(
state == "On_Treatment_Target_Line" ~ "N_on_D",
state == "off_treatment" ~ "N_off_D",
state == "progression" ~ "N_p_D",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(label))  # Remove rows we don't use
# Step 2: Count occurrences
summary_table_death <- summary_counts_death %>%
group_by(death_month, label) %>%
summarise(n = n(), .groups = "drop") %>%
pivot_wider(names_from = label, values_from = n, values_fill = 0) %>%
arrange(death_month)
summary_table <- summary_table %>%
left_join(summary_table_death, by = c("month_relative" = "death_month"))
summary_table <- summary_table %>%
mutate(across(where(is.numeric), ~replace_na(., 0)))
write.csv(summary_table, file = "H://PREDiCText//nirupama//summary_counts_lung.csv")
if (flatiron) {
flatiron_data <- haven::read_dta("H://PREDiCText//lingyi//Flatiron_exploratory_round1and4//Demographics//Demographics_allDataSets_round1and4.dta")
flatiron_data <- flatiron_data %>%
dplyr::select(patientid, gender) %>%
dplyr::distinct(patientid, .keep_all = TRUE)
drug_transitions <- drug_transitions %>%
dplyr::left_join(flatiron_data, by = "patientid")
}
flatiron = TRUE
if (flatiron) {
flatiron_data <- haven::read_dta("H://PREDiCText//lingyi//Flatiron_exploratory_round1and4//Demographics//Demographics_allDataSets_round1and4.dta")
flatiron_data <- flatiron_data %>%
dplyr::select(patientid, gender) %>%
dplyr::distinct(patientid, .keep_all = TRUE)
drug_transitions <- drug_transitions %>%
dplyr::left_join(flatiron_data, by = "patientid")
}
transition_counts <- drug_transitions %>%
dplyr::arrange(patientid, linestartdate, lineenddate) %>%
dplyr::group_by(patientid) %>%
dplyr::mutate(next_state = dplyr::lead(state)) %>%
dplyr::ungroup() %>%
dplyr::count(state, next_state, sort = TRUE) %>%
dplyr::arrange(state, next_state)
summary_counts <- transition_counts %>%
dplyr::mutate(
label = dplyr::case_when(
state == "On_Treatment_Target_Line" & next_state == "progression" ~ "N_on_to_prog",
state == "On_Treatment_Target_Line" & next_state == "Death" ~ "N_on_to_death",
state == "On_Treatment_Target_Line" & next_state == "off_treatment" ~ "N_on_to_off",
state == "off_treatment" & next_state == "progression" ~ "N_off_to_prog",
state == "off_treatment" & next_state == "Death" ~ "N_off_to_death",
state == "progression" &  next_state == "Death" ~ "N_prog_to_death",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(label))
summary_table <- summary_counts %>%
dplyr::select(label, n) %>%
tidyr::pivot_wider(names_from = label, values_from = n)
# Overall count by proportion of sex
n_sex_prop <- drug_transitions %>%
dplyr::distinct(patientid, .keep_all = TRUE) %>%
dplyr::group_by(gender) %>%
dplyr::summarise(n = n()/length(unique(drug_transitions$patientid)))
flatiron_data <- haven::read_dta("H://PREDiCText//lingyi//Flatiron_exploratory_round1and4//Demographics//Demographics_allDataSets_round1and4.dta")
flatiron_data <- flatiron_data %>%
dplyr::select(patientid, gender) %>%
dplyr::distinct(patientid, .keep_all = TRUE)
drug_transitions <- drug_transitions %>%
dplyr::left_join(flatiron_data, by = "patientid")
transition_counts <- drug_transitions %>%
dplyr::arrange(patientid, linestartdate, lineenddate) %>%
dplyr::group_by(patientid) %>%
dplyr::mutate(next_state = dplyr::lead(state)) %>%
dplyr::ungroup() %>%
dplyr::count(state, next_state, sort = TRUE) %>%
dplyr::arrange(state, next_state)
View(transition_counts)
summary_counts <- transition_counts %>%
dplyr::mutate(
label = dplyr::case_when(
state == "On_Treatment_Target_Line" & next_state == "progression" ~ "N_on_to_prog",
state == "On_Treatment_Target_Line" & next_state == "Death" ~ "N_on_to_death",
state == "On_Treatment_Target_Line" & next_state == "off_treatment" ~ "N_on_to_off",
state == "off_treatment" & next_state == "progression" ~ "N_off_to_prog",
state == "off_treatment" & next_state == "Death" ~ "N_off_to_death",
state == "progression" &  next_state == "Death" ~ "N_prog_to_death",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(label))
summary_table <- summary_counts %>%
dplyr::select(label, n) %>%
tidyr::pivot_wider(names_from = label, values_from = n)
# Overall count by proportion of sex
n_sex_prop <- drug_transitions %>%
dplyr::distinct(patientid, .keep_all = TRUE) %>%
dplyr::group_by(gender) %>%
dplyr::summarise(n = n()/length(unique(drug_transitions$patientid)))
summary_table$N_total <- length(unique(drug_transitions$patientid))
summary_table$N_prop_F <- n_sex_prop$n[n_sex_prop$gender == "F"]
summary_table$N_prop_M <- n_sex_prop$n[n_sex_prop$gender == "M"]
View(summary_table)
# Drug episodes for breast
drug_episodes <- prep_episode_data(tumour = "breast", treatment = "capecitabine", drug_separator = ",",
overlap_threshold = 1, exact = TRUE)
drug_transitions <- construct_state_episodes(drug_episodes)$drug_transitions
lines <- construct_state_episodes(drug_episodes)$lines
params_results <- state_exit_weibull_estimates(drug_transitions, lines)
if (flatiron) {
flatiron_data <- haven::read_dta("H://PREDiCText//lingyi//Flatiron_exploratory_round1and4//Demographics//Demographics_allDataSets_round1and4.dta")
flatiron_data <- flatiron_data %>%
dplyr::select(patientid, gender) %>%
dplyr::distinct(patientid, .keep_all = TRUE)
drug_transitions <- drug_transitions %>%
dplyr::left_join(flatiron_data, by = "patientid")
}
transition_counts <- drug_transitions %>%
dplyr::arrange(patientid, linestartdate, lineenddate) %>%
dplyr::group_by(patientid) %>%
dplyr::mutate(next_state = dplyr::lead(state)) %>%
dplyr::ungroup() %>%
dplyr::count(state, next_state, sort = TRUE) %>%
dplyr::arrange(state, next_state)
summary_counts <- transition_counts %>%
dplyr::mutate(
label = dplyr::case_when(
state == "On_Treatment_Target_Line" & next_state == "progression" ~ "N_on_to_prog",
state == "On_Treatment_Target_Line" & next_state == "Death" ~ "N_on_to_death",
state == "On_Treatment_Target_Line" & next_state == "off_treatment" ~ "N_on_to_off",
state == "off_treatment" & next_state == "progression" ~ "N_off_to_prog",
state == "off_treatment" & next_state == "Death" ~ "N_off_to_death",
state == "progression" &  next_state == "Death" ~ "N_prog_to_death",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(label))
summary_table <- summary_counts %>%
dplyr::select(label, n) %>%
tidyr::pivot_wider(names_from = label, values_from = n)
# Overall count by proportion of sex
n_sex_prop <- drug_transitions %>%
dplyr::distinct(patientid, .keep_all = TRUE) %>%
dplyr::group_by(gender) %>%
dplyr::summarise(n = n()/length(unique(drug_transitions$patientid)))
summary_table$N_total <- length(unique(drug_transitions$patientid))
summary_table$N_prop_F <- n_sex_prop$n[n_sex_prop$gender == "F"]
summary_table$N_prop_M <- n_sex_prop$n[n_sex_prop$gender == "M"]
View(summary_overall)
View(summary_table)
# Drug episodes for CRC
drug_episodes <- prep_episode_data(tumour = "crc", treatment = "folfiri", drug_separator = ",",
overlap_threshold = 1, exact = TRUE)
drug_transitions <- construct_state_episodes(drug_episodes)$drug_transitions
lines <- construct_state_episodes(drug_episodes)$lines
params_results <- state_exit_weibull_estimates(drug_transitions, lines)
if (flatiron) {
flatiron_data <- haven::read_dta("H://PREDiCText//lingyi//Flatiron_exploratory_round1and4//Demographics//Demographics_allDataSets_round1and4.dta")
flatiron_data <- flatiron_data %>%
dplyr::select(patientid, gender) %>%
dplyr::distinct(patientid, .keep_all = TRUE)
drug_transitions <- drug_transitions %>%
dplyr::left_join(flatiron_data, by = "patientid")
}
transition_counts <- drug_transitions %>%
dplyr::arrange(patientid, linestartdate, lineenddate) %>%
dplyr::group_by(patientid) %>%
dplyr::mutate(next_state = dplyr::lead(state)) %>%
dplyr::ungroup() %>%
dplyr::count(state, next_state, sort = TRUE) %>%
dplyr::arrange(state, next_state)
summary_counts <- transition_counts %>%
dplyr::mutate(
label = dplyr::case_when(
state == "On_Treatment_Target_Line" & next_state == "progression" ~ "N_on_to_prog",
state == "On_Treatment_Target_Line" & next_state == "Death" ~ "N_on_to_death",
state == "On_Treatment_Target_Line" & next_state == "off_treatment" ~ "N_on_to_off",
state == "off_treatment" & next_state == "progression" ~ "N_off_to_prog",
state == "off_treatment" & next_state == "Death" ~ "N_off_to_death",
state == "progression" &  next_state == "Death" ~ "N_prog_to_death",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(label))
summary_table <- summary_counts %>%
dplyr::select(label, n) %>%
tidyr::pivot_wider(names_from = label, values_from = n)
# Overall count by proportion of sex
n_sex_prop <- drug_transitions %>%
dplyr::distinct(patientid, .keep_all = TRUE) %>%
dplyr::group_by(gender) %>%
dplyr::summarise(n = n()/length(unique(drug_transitions$patientid)))
summary_table$N_total <- length(unique(drug_transitions$patientid))
summary_table$N_prop_F <- n_sex_prop$n[n_sex_prop$gender == "F"]
summary_table$N_prop_M <- n_sex_prop$n[n_sex_prop$gender == "M"]
View(summary_table)
# Drug episodes for pancreatic
drug_episodes <- prep_episode_data(tumour = "pancreatic", treatment = "gemcitabine", drug_separator = ",",
overlap_threshold = 1, exact = TRUE)
drug_transitions <- construct_state_episodes(drug_episodes)$drug_transitions
lines <- construct_state_episodes(drug_episodes)$lines
params_results <- state_exit_weibull_estimates(drug_transitions, lines)
if (flatiron) {
flatiron_data <- haven::read_dta("H://PREDiCText//lingyi//Flatiron_exploratory_round1and4//Demographics//Demographics_allDataSets_round1and4.dta")
flatiron_data <- flatiron_data %>%
dplyr::select(patientid, gender) %>%
dplyr::distinct(patientid, .keep_all = TRUE)
drug_transitions <- drug_transitions %>%
dplyr::left_join(flatiron_data, by = "patientid")
}
transition_counts <- drug_transitions %>%
dplyr::arrange(patientid, linestartdate, lineenddate) %>%
dplyr::group_by(patientid) %>%
dplyr::mutate(next_state = dplyr::lead(state)) %>%
dplyr::ungroup() %>%
dplyr::count(state, next_state, sort = TRUE) %>%
dplyr::arrange(state, next_state)
summary_counts <- transition_counts %>%
dplyr::mutate(
label = dplyr::case_when(
state == "On_Treatment_Target_Line" & next_state == "progression" ~ "N_on_to_prog",
state == "On_Treatment_Target_Line" & next_state == "Death" ~ "N_on_to_death",
state == "On_Treatment_Target_Line" & next_state == "off_treatment" ~ "N_on_to_off",
state == "off_treatment" & next_state == "progression" ~ "N_off_to_prog",
state == "off_treatment" & next_state == "Death" ~ "N_off_to_death",
state == "progression" &  next_state == "Death" ~ "N_prog_to_death",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(label))
summary_table <- summary_counts %>%
dplyr::select(label, n) %>%
tidyr::pivot_wider(names_from = label, values_from = n)
# Overall count by proportion of sex
n_sex_prop <- drug_transitions %>%
dplyr::distinct(patientid, .keep_all = TRUE) %>%
dplyr::group_by(gender) %>%
dplyr::summarise(n = n()/length(unique(drug_transitions$patientid)))
summary_table$N_total <- length(unique(drug_transitions$patientid))
summary_table$N_prop_F <- n_sex_prop$n[n_sex_prop$gender == "F"]
summary_table$N_prop_M <- n_sex_prop$n[n_sex_prop$gender == "M"]
View(summary_table)
install.packages("targets")
install.packages("tarchetypes")
tar_source()
targets::tar_make()
devtools::document()
rm(list = ls())
devtools::document()
devtools::install()
targets::tar_make()
targets::tar_make()
targets::tar_make()
library(targets)
library(tarchetypes)
library(openxlsx)
library(glue)
library(episodes)
targets::tar_make()
targets::tar_make()
targets::tar_make()
# Drug episodes for lung
drug_episodes <- prep_episode_data(tumour = "nsclc", treatment = "cisplatin|carboplatin", drug_separator = ",",
overlap_threshold = 1)
drug_transitions <- construct_state_episodes(drug_episodes)$drug_transitions
lines <- construct_state_episodes(drug_episodes)$lines
params_results <- state_exit_weibull_estimates(drug_transitions, lines)
View(params_results)
View(drug_episodes)
View(drug_transitions)
View(lines)
get_surv_data("On_Treatment_Target_Line")
get_surv_data <- function(state_filter, join_LoT = FALSE) {
df <- drug_transitions %>%
dplyr::filter(state == state_filter) %>%
dplyr::mutate(time = as.numeric(lineenddate - linestartdate)) %>%
dplyr::filter(time > 0)
df <- df %>%
dplyr::left_join(
lines %>% dplyr::select(patientid, prior_lines) %>% dplyr::distinct(),
by = "patientid"
)
if (join_LoT) {
LoT_progression <- lines %>%
dplyr::group_by(patientid) %>%
dplyr::mutate(new_line = ifelse(!is.na(next_linestart), "LoT", "clinical")) %>%
dplyr::distinct(patientid, .keep_all = TRUE) %>%
dplyr::select(patientid, new_line)
df <- df %>% dplyr::left_join(LoT_progression, by = "patientid")
}
return(df)
}
get_surv_data("On_Treatment_Target_Line")
library(dplyr)
params_results <- state_exit_weibull_estimates(drug_transitions, lines)
get_surv_data("On_Treatment_Target_Line")
df <- get_surv_data("On_Treatment_Target_Line")
LoT_progression <- lines %>%
dplyr::group_by(patientid) %>%
dplyr::mutate(new_line = ifelse(!is.na(next_linestart), "LoT", "clinical")) %>%
dplyr::distinct(patientid, .keep_all = TRUE) %>%
dplyr::select(patientid, new_line)
df <- df %>% dplyr::left_join(LoT_progression, by = "patientid")
View(LoT_progression)
formula <- if (!is.null(covariates)) {
stats::as.formula(paste("Surv(time, event) ~", paste(covariates, collapse = "+")))
} else {
survival::Surv(time, event) ~ 1
}
covariates = c("prior_lines")
formula <- if (!is.null(covariates)) {
stats::as.formula(paste("Surv(time, event) ~", paste(covariates, collapse = "+")))
} else {
survival::Surv(time, event) ~ 1
}
formula
fit <- tryCatch({
flexsurv::flexsurvreg(formula, data = df, dist = "weibull")
}, error = function(e) NULL)
fit
flexsurv::flexsurvreg(formula, data = df, dist = "weibull")
library(survival)
flexsurv::flexsurvreg(formula, data = df, dist = "weibull")
devtools::document()
devtools::install()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
state_sample_sizes <- state_numbers_summary(drug_transitions)
targets::tar_make()
targets::tar_make()
# Drug episodes for CRC
drug_episodes <- prep_episode_data(tumour = "crc", treatment = "folfiri", drug_separator = ",",
overlap_threshold = 1, exact = TRUE)
library(episodes)
# Drug episodes for CRC
drug_episodes <- prep_episode_data(tumour = "crc", treatment = "folfiri", drug_separator = ",",
overlap_threshold = 1, exact = TRUE)
drug_transitions <- construct_state_episodes(drug_episodes)$drug_transitions
lines <- construct_state_episodes(drug_episodes)$lines
params_results <- state_exit_weibull_estimates(drug_transitions, lines)
params_results
Drug episodes for lung
drug_episodes <- prep_episode_data(tumour = "nsclc", treatment = "cisplatin|carboplatin", drug_separator = ",",
overlap_threshold = 1)
drug_transitions <- construct_state_episodes(drug_episodes)$drug_transitions
lines <- construct_state_episodes(drug_episodes)$lines
params_results <- state_exit_weibull_estimates(drug_transitions, lines)
state_sample_sizes <- state_numbers_summary(drug_transitions)
death_table <- death_table(drug_transitions)
drug_episodes <- prep_episode_data(tumour = "nsclc", treatment = "cisplatin|carboplatin", drug_separator = ",",
overlap_threshold = 1)
targets::tar_make()
warnings()
targets::tar_make()
targets::tar_make()
tar_make(callr_function = NULL)
targets::tar_make(callr_function = NULL)
library(episodes)
targets::tar_make(callr_function = NULL)
targets::tar_make()
devtools::install()
targets::tar_make()
devtools::install()
devtools::install()
devtools::install()
targets::tar_make()
targets::tar_make()
# Drug episodes for lung
drug_episodes <- prep_episode_data(tumour = "nsclc", treatment = "cisplatin|carboplatin", drug_separator = ",",
overlap_threshold = 1)
library(episodes)
# Drug episodes for lung
drug_episodes <- prep_episode_data(tumour = "nsclc", treatment = "cisplatin|carboplatin", drug_separator = ",",
overlap_threshold = 1)
drug_transitions <- construct_state_episodes(drug_episodes)$drug_transitions
lines <- construct_state_episodes(drug_episodes)$lines
params_results <- state_exit_weibull_estimates(drug_transitions, lines)
state_sample_sizes <- state_numbers_summary(drug_transitions)
death_table <- death_table(drug_transitions)
# Load existing workbook (change name here)
wb <- openxlsx::loadWorkbook(glue::glue("H://PREDiCText//nirupama//weibull_estimates//01_public_parameters_updatedNTGC.xlsx"))
# Run function once for ech tumour (this can be looped over)
workbook <- write_shape_scale(wb = wb, params_results = params_results, tumour = "lung", treatment = "cisplatin")
# Run function once for ech tumour (this can be looped over)
workbook <- write_summary(wb = wb, params_results = state_sample_sizes, tumour = "lung", treatment = "cisplatin")
# Run function once for ech tumour (this can be looped over)
workbook <- write_summary(wb = wb, summary_table = state_sample_sizes, tumour = "lung", treatment = "cisplatin")
devtools::install()
library(episodes)
# Run function once for ech tumour (this can be looped over)
workbook <- write_summary(wb = wb, summary_table = state_sample_sizes, tumour = "lung", treatment = "cisplatin")
